
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import os
import buildings

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame, StringVar, Checkbutton, BooleanVar
from pathlib import Path


ASSETS_PATH = os.path.dirname(__file__) + "/assets"


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


class Converter_Frame(Frame):

    def __init__(self, parent, window):
        self.parent = parent
        self.window = window

        self.validate_entry_cmd = (self.window.register(self.validate), '%P')

        self.has_bonus = BooleanVar(value=False)

    def create_elements(self):
        self.elements = {}
        self.create_canvas()
        self.create_header()
        self.create_body()
        self.create_footer()

    def create_canvas(self):
        self.elements["canvas"] = Canvas(
            self.window,
            bg = "#FFFFFF",
            height = 671,
            width = 698,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.elements["canvas"].place(x = 0, y = 0)

    def create_header_background(self):
        self.header_background_image = PhotoImage(file=relative_to_assets("commons/header_background.png"))

        self.elements["header_background"] = self.elements["canvas"].create_image(349.0, 144.0, image=self.header_background_image)
    
    def create_title(self):
        self.elements["canvas"].create_text(
            400.0,
            80.0,
            anchor="center",
            text="Converter",
            fill="#2F0F73",
            font=("Irish Grover", 64 * -1)
        )

    def create_header(self):
        self.create_header_background()
        self.create_title()

    def create_body(self):
        self.create_cristal_entry()
        self.create_arena_entry()
        self.create_glory_entry()
        self.create_bonus_checkbox()
        self.create_arrows_and_stuffs()

    def create_footer(self):
        self.create_small_back_button()
        self.create_small_quit_button()
        self.create_trademark()

    def create_trademark(self):
        self.elements["canvas"].create_text(
            12.0,
            638.0,
            anchor="nw",
            text="Developed by Quentin Norbert",
            fill="#000000",
            font=("Inter", 20 * -1)
        )

    def create_small_back_button(self):
        self.small_back_button_image = PhotoImage(
            file=relative_to_assets("commons/small_back_button.png"))
        self.elements["small_back_button"] = Button(
            image=self.small_back_button_image,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.parent.switch_frame("Buildings_Frame"),
            relief="flat"
        )
        self.elements["small_back_button"].place(
            x=15.0,
            y=583.0,
            width=95.0,
            height=41.0
        )

    def create_small_quit_button(self):
        self.small_quit_button_image = PhotoImage(
            file=relative_to_assets("commons/small_quit_button.png"))
        self.elements["small_quit_button"] = Button(
            image=self.small_quit_button_image,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.window.destroy(),
            relief="flat"
        )
        self.elements["small_quit_button"].place(
            x=585.0,
            y=583.0,
            width=95.0,
            height=41.0
        )

    def create_cristal_entry(self):
        self.entry_cristals_image = PhotoImage(
            file=relative_to_assets("frame2/entry_cristals.png"))
        self.elements["cristal_entry_bg"] = self.elements["canvas"].create_image(
            143.0,
            379.5,
            image=self.entry_cristals_image
        )

        self.cristals_value = StringVar()

        self.elements["cristal_entry"] = Entry(
            bd=0,
            bg="#0099FF",
            fg="#FFFFFF",
            highlightthickness=0,
            validate="all",
            validatecommand=self.validate_entry_cmd,
            font=("Roboto", 12),
            justify='right',
            textvariable=self.cristals_value
        )
        self.elements["cristal_entry"].place(
            x=20.0,
            y=360.0,
            width=216.0,
            height=40.0
        )
        self.elements["cristal_entry"].bind("<KeyRelease>", self.on_cristals_change)

    def create_arena_entry(self):
        self.entry_arena_image = PhotoImage(
            file=relative_to_assets("frame2/entry_arena.png"))
        self.elements["arena_entry_bg"] = self.elements["canvas"].create_image(
            552.0,
            379.5,
            image=self.entry_arena_image
        )

        self.arena_value = StringVar()

        self.elements["arena_entry"] = Entry(
            bd=0,
            bg="#0099FF",
            fg="#FFFFFF",
            highlightthickness=0,
            validate="all",
            validatecommand=self.validate_entry_cmd,
            font=("Roboto", 12),
            justify='right',
            textvariable=self.arena_value
        )
        self.elements["arena_entry"].place(
            x=429.0,
            y=363.0,
            width=218.0,
            height=35.0
        )
        self.elements["arena_entry"].bind("<KeyRelease>", self.on_arena_change)
   
    def create_glory_entry(self):
        self.entry_glory_image = PhotoImage(
            file=relative_to_assets("frame2/entry_glory.png"))
        self.elements["glory_entry_bg"] = self.elements["canvas"].create_image(
            349.0,
            514.5,
            image=self.entry_glory_image
        )
        self.glory_value = StringVar()

        self.elements["glory_entry"] = Entry(
            bd=0,
            bg="#0099FF",
            fg="#FFFFFF",
            highlightthickness=0,
            validate="all",
            validatecommand=self.validate_entry_cmd,
            font=("Roboto", 12),
            justify='right',
            textvariable=self.glory_value
        )
        self.elements["glory_entry"].place(
            x=226.0,
            y=498.0,
            width=218.0,
            height=35.0
        )
        self.elements["glory_entry"].bind("<KeyRelease>", self.on_glory_change)

    def create_bonus_checkbox(self):
        self.switch_on = PhotoImage(
            file=relative_to_assets("frame2/checkbox_on.png")
        )
        self.switch_off = PhotoImage(
            file=relative_to_assets("frame2/checkbox_off.png")
        )
        self.elements["bonus_checkbox"] = Checkbutton(
            variable=self.has_bonus,
            onvalue=True,
            offvalue=False,
            command=self.update_data,
            image=self.switch_off,
            selectimage=self.switch_on,
            indicatoron=False,
            bg="#FFFFFF",
            border=0,
            activebackground="#FFFFFF",
        )
        self.elements["bonus_checkbox"].place(
            x=260.0,
            y=550.0,
        )

        self.elements["canvas"].create_text(
            303.0,
            555.0,
            anchor="nw",
            text="+1 Bonus",
            fill="#000000",
            font=("Inter", 20 * -1)
        )

    def create_arrows_and_stuffs(self):
        self.arrow_and_stuffs_image = PhotoImage(
            file=relative_to_assets("frame2/arrows_and_stuffs.png"))
        self.elements["arrows_and_stuffs"] = self.elements["canvas"].create_image(
            352.0,
            420.0,
            image=self.arrow_and_stuffs_image
        )
    
    def destroy(self):
        [element.place_forget() for element in self.elements]

    def validate(self, input_entry):
        return str.isdigit(input_entry) or input_entry == ""
    
    def on_cristals_change(self, *args):
        cristals = int(self.cristals_value.get()) if self.cristals_value.get() != "" else 0

        new_glory_value = buildings.convert_cristals_to_glory(cristals, self.has_bonus.get())
        self.glory_value.set(new_glory_value)

        new_arena_value = buildings.convert_cristals_to_arena(cristals)
        self.arena_value.set(new_arena_value)

    def on_glory_change(self, *args):
        glory = int(self.glory_value.get()) if self.glory_value.get() != "" else 0

        new_cristal_value = buildings.convert_glory_to_cristals(glory, self.has_bonus.get())
        self.cristals_value.set(new_cristal_value)

        new_arena_value = buildings.convert_glory_to_arena(glory, self.has_bonus.get())
        self.arena_value.set(new_arena_value)

    def on_arena_change(self, *args):
        arena = int(self.arena_value.get()) if self.arena_value.get() != "" else 0

        new_cristal_value = buildings.convert_arena_to_cristals(arena)
        self.cristals_value.set(new_cristal_value)

        new_glory_value = buildings.convert_arena_to_glory(arena, self.has_bonus.get())
        self.glory_value.set(new_glory_value)

    def update_data(self, *args):
        self.on_glory_change()